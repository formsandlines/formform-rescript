// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DNA$Formform from "../src/core/calc/DNA.bs.js";
import * as Calc$Formform from "../src/core/calc/Calc.bs.js";
import * as Value$Formform from "../src/core/form/Value.bs.js";

Zora.test("Testing VPoint.show", (function (t) {
        t.test("given an empty VPoint", (function (t) {
                var input = [];
                var expected = "[]";
                t.equal(Value$Formform.VPoint.show(input), expected, "should be " + expected);
                var expected$1 = "";
                t.equal(Value$Formform.VPoint.showAsKey(input), expected$1, "should be " + expected$1);
                
              }));
        t.test("given a singleton VPoint", (function (t) {
                var input = [/* N */0];
                var expected = "[N]";
                t.equal(Value$Formform.VPoint.show(input), expected, "should be " + expected);
                var expected$1 = "N";
                t.equal(Value$Formform.VPoint.showAsKey(input), expected$1, "should be " + expected$1);
                
              }));
        t.test("given a VPoint", (function (t) {
                var input = [
                  /* N */0,
                  /* U */1,
                  /* I */2,
                  /* M */3,
                  /* I */2
                ];
                var expected = "[N,U,I,M,I]";
                t.equal(Value$Formform.VPoint.show(input), expected, "should be " + expected);
                var expected$1 = "NUIMI";
                t.equal(Value$Formform.VPoint.showAsKey(input), expected$1, "should be " + expected$1);
                
              }));
        
      }));

Zora.test("Testing VPoint.tFromStr", (function (t) {
        t.test("given an empty string", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "");
                var expected = [];
                t.equal(actual, expected, "should be some empty array");
                
              }));
        t.test("given a const char", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "N");
                var expected = [/* N */0];
                t.equal(actual, expected, "should be some array [N]");
                
              }));
        t.test("given a const string", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "NUIMI");
                var expected = [
                  /* N */0,
                  /* U */1,
                  /* I */2,
                  /* M */3,
                  /* I */2
                ];
                t.equal(actual, expected, "should be some array [N,U,I,M,I]");
                
              }));
        t.test("given an int char", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "0");
                var expected = [/* N */0];
                t.equal(actual, expected, "should be some array [N]");
                
              }));
        t.test("given an int string", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "01232");
                var expected = [
                  /* N */0,
                  /* U */1,
                  /* I */2,
                  /* M */3,
                  /* I */2
                ];
                t.equal(actual, expected, "should be some array [N,U,I,M,I]");
                
              }));
        t.test("given an invalid char", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "O");
                t.equal(actual, undefined, "should be None");
                
              }));
        t.test("given an invalid string", (function (t) {
                var actual = Value$Formform.VPoint.tFromStr(undefined, "M_");
                t.equal(actual, undefined, "should be None");
                
              }));
        
      }));

Zora.test("Testing VSpace.make", (function (t) {
        t.test("given dimension 0", (function (t) {
                var actual = Value$Formform.VSpace.make(undefined, 0);
                var expected = [[/* N */0]];
                t.equal(Value$Formform.VSpace.getPoints(actual), expected, "should be a VSpace of size according to dimension");
                
              }));
        t.test("given dimension 1", (function (t) {
                var actual = Value$Formform.VSpace.make(undefined, 1);
                var expected = [
                  [/* N */0],
                  [/* U */1],
                  [/* I */2],
                  [/* M */3]
                ];
                t.equal(Value$Formform.VSpace.getPoints(actual), expected, "should be a VSpace of size according to dimension");
                
              }));
        t.test("given dimension 2", (function (t) {
                var actual = Value$Formform.VSpace.make(undefined, 2);
                var expected = [
                  [
                    /* N */0,
                    /* N */0
                  ],
                  [
                    /* N */0,
                    /* U */1
                  ],
                  [
                    /* N */0,
                    /* I */2
                  ],
                  [
                    /* N */0,
                    /* M */3
                  ],
                  [
                    /* U */1,
                    /* N */0
                  ],
                  [
                    /* U */1,
                    /* U */1
                  ],
                  [
                    /* U */1,
                    /* I */2
                  ],
                  [
                    /* U */1,
                    /* M */3
                  ],
                  [
                    /* I */2,
                    /* N */0
                  ],
                  [
                    /* I */2,
                    /* U */1
                  ],
                  [
                    /* I */2,
                    /* I */2
                  ],
                  [
                    /* I */2,
                    /* M */3
                  ],
                  [
                    /* M */3,
                    /* N */0
                  ],
                  [
                    /* M */3,
                    /* U */1
                  ],
                  [
                    /* M */3,
                    /* I */2
                  ],
                  [
                    /* M */3,
                    /* M */3
                  ]
                ];
                t.equal(Value$Formform.VSpace.getPoints(actual), expected, "should be a VSpace of size according to dimension");
                
              }));
        
      }));

function listRel(vp) {
  return Belt_Array.reduce(vp, /* N */0, (function (c1, c2) {
                return Calc$Formform.Const.rel(c1, c2);
              }));
}

Zora.test("Testing VSpace.toDNA", (function (t) {
        t.test("given a dim. 0 VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 0);
                var actual = Value$Formform.VSpace.toDNA(input, listRel);
                var expected = DNA$Formform.makeUnsafe([/* N */0]);
                t.equal(actual, expected, "should be a DNA " + DNA$Formform.show(undefined, undefined, expected));
                
              }));
        t.test("given a dim. 1 VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 1);
                var actual = Value$Formform.VSpace.toDNA(input, listRel);
                var expected = DNA$Formform.makeUnsafe([
                      /* M */3,
                      /* I */2,
                      /* U */1,
                      /* N */0
                    ]);
                t.equal(actual, expected, "should be a DNA " + DNA$Formform.show(undefined, undefined, expected));
                
              }));
        t.test("given a dim. 2 VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 2);
                var actual = Value$Formform.VSpace.toDNA(input, listRel);
                var expected = DNA$Formform.makeUnsafe([
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* M */3,
                      /* U */1,
                      /* U */1,
                      /* M */3,
                      /* I */2,
                      /* U */1,
                      /* N */0
                    ]);
                t.equal(actual, expected, "should be a DNA " + DNA$Formform.show(undefined, undefined, expected));
                
              }));
        
      }));

function map_n(param) {
  return /* N */0;
}

Zora.test("Testing VMap.make", (function (t) {
        t.test("given a VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 0);
                var actual = Value$Formform.VMap.make(input, map_n);
                var expected = Value$Formform.VMap.makeUnsafe_Cell(/* N */0);
                t.equal(actual, expected, "should be a valid VMap");
                var expected$1 = "<N>";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected$1, "should be " + expected$1);
                
              }));
        t.test("given a VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 1);
                var actual = Value$Formform.VMap.make(input, map_n);
                var expected = Value$Formform.VMap.makeUnsafe_Map([
                      [
                        /* N */0,
                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                      ],
                      [
                        /* U */1,
                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                      ],
                      [
                        /* I */2,
                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                      ],
                      [
                        /* M */3,
                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                      ]
                    ]);
                t.equal(actual, expected, "should be a valid VMap");
                var expected$1 = "[N: <N>, U: <N>, I: <N>, M: <N>]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected$1, "should be " + expected$1);
                
              }));
        t.test("given a VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 2);
                var actual = Value$Formform.VMap.make(input, map_n);
                var expected = Value$Formform.VMap.makeUnsafe_Map([
                      [
                        /* N */0,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ]
                            ])
                      ],
                      [
                        /* U */1,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ]
                            ])
                      ],
                      [
                        /* I */2,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ]
                            ])
                      ],
                      [
                        /* M */3,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                              ]
                            ])
                      ]
                    ]);
                t.equal(actual, expected, "should be a valid VMap");
                var expected$1 = "[\n  N: [N: <N>, U: <N>, I: <N>, M: <N>], \n  U: [N: <N>, U: <N>, I: <N>, M: <N>], \n  I: [N: <N>, U: <N>, I: <N>, M: <N>], \n  M: [N: <N>, U: <N>, I: <N>, M: <N>]\n]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected$1, "should be " + expected$1);
                
              }));
        t.test("given a VSpace", (function (t) {
                var input = Value$Formform.VSpace.make(undefined, 3);
                var actual = Value$Formform.VMap.make(input, map_n);
                var expected = Value$Formform.VMap.makeUnsafe_Map([
                      [
                        /* N */0,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ]
                            ])
                      ],
                      [
                        /* U */1,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ]
                            ])
                      ],
                      [
                        /* I */2,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ]
                            ])
                      ],
                      [
                        /* M */3,
                        Value$Formform.VMap.makeUnsafe_Map([
                              [
                                /* N */0,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* U */1,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* I */2,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ],
                              [
                                /* M */3,
                                Value$Formform.VMap.makeUnsafe_Map([
                                      [
                                        /* N */0,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* U */1,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* I */2,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ],
                                      [
                                        /* M */3,
                                        Value$Formform.VMap.makeUnsafe_Cell(/* N */0)
                                      ]
                                    ])
                              ]
                            ])
                      ]
                    ]);
                t.equal(actual, expected, "should be a valid VMap");
                var expected$1 = "[\n  N: [\n    N: [N: <N>, U: <N>, I: <N>, M: <N>], \n    U: [N: <N>, U: <N>, I: <N>, M: <N>], \n    I: [N: <N>, U: <N>, I: <N>, M: <N>], \n    M: [N: <N>, U: <N>, I: <N>, M: <N>]\n  ], \n  U: [\n    N: [N: <N>, U: <N>, I: <N>, M: <N>], \n    U: [N: <N>, U: <N>, I: <N>, M: <N>], \n    I: [N: <N>, U: <N>, I: <N>, M: <N>], \n    M: [N: <N>, U: <N>, I: <N>, M: <N>]\n  ], \n  I: [\n    N: [N: <N>, U: <N>, I: <N>, M: <N>], \n    U: [N: <N>, U: <N>, I: <N>, M: <N>], \n    I: [N: <N>, U: <N>, I: <N>, M: <N>], \n    M: [N: <N>, U: <N>, I: <N>, M: <N>]\n  ], \n  M: [\n    N: [N: <N>, U: <N>, I: <N>, M: <N>], \n    U: [N: <N>, U: <N>, I: <N>, M: <N>], \n    I: [N: <N>, U: <N>, I: <N>, M: <N>], \n    M: [N: <N>, U: <N>, I: <N>, M: <N>]\n  ]\n]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected$1, "should be " + expected$1);
                
              }));
        
      }));

Zora.test("Testing VMap.fromDNA", (function (t) {
        t.test("given a DNA", (function (t) {
                var input = DNA$Formform.makeUnsafe([/* U */1]);
                var actual = Value$Formform.VMap.fromDNA(input);
                var expected = "<U>";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected, "should be " + expected);
                
              }));
        t.test("given a DNA", (function (t) {
                var input = DNA$Formform.makeUnsafe([
                      /* M */3,
                      /* I */2,
                      /* U */1,
                      /* N */0
                    ]);
                var actual = Value$Formform.VMap.fromDNA(input);
                var expected = "[N: <N>, U: <U>, I: <I>, M: <M>]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected, "should be " + expected);
                
              }));
        t.test("given a DNA", (function (t) {
                var input = DNA$Formform.makeUnsafe([
                      /* N */0,
                      /* U */1,
                      /* I */2,
                      /* M */3,
                      /* N */0,
                      /* N */0,
                      /* I */2,
                      /* I */2,
                      /* N */0,
                      /* U */1,
                      /* N */0,
                      /* U */1,
                      /* N */0,
                      /* N */0,
                      /* N */0,
                      /* N */0
                    ]);
                var actual = Value$Formform.VMap.fromDNA(input);
                var expected = "[\n  N: [N: <N>, U: <N>, I: <N>, M: <N>], \n  U: [N: <U>, U: <N>, I: <U>, M: <N>], \n  I: [N: <I>, U: <I>, I: <N>, M: <N>], \n  M: [N: <M>, U: <I>, I: <U>, M: <N>]\n]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected, "should be " + expected);
                
              }));
        t.test("given a DNA", (function (t) {
                var input = DNA$Formform.makeUnsafe([
                      /* N */0,
                      /* U */1,
                      /* I */2,
                      /* M */3,
                      /* U */1,
                      /* N */0,
                      /* M */3,
                      /* I */2,
                      /* I */2,
                      /* M */3,
                      /* N */0,
                      /* U */1,
                      /* M */3,
                      /* I */2,
                      /* U */1,
                      /* N */0,
                      /* U */1,
                      /* U */1,
                      /* M */3,
                      /* M */3,
                      /* U */1,
                      /* I */2,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* U */1,
                      /* U */1,
                      /* M */3,
                      /* M */3,
                      /* U */1,
                      /* I */2,
                      /* I */2,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* I */2,
                      /* I */2,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* I */2,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* M */3,
                      /* I */2
                    ]);
                var actual = Value$Formform.VMap.fromDNA(input);
                var expected = "[\n  N: [\n    N: [N: <I>, U: <M>, I: <M>, M: <M>], \n    U: [N: <M>, U: <M>, I: <M>, M: <M>], \n    I: [N: <M>, U: <M>, I: <M>, M: <M>], \n    M: [N: <M>, U: <M>, I: <M>, M: <M>]\n  ], \n  U: [\n    N: [N: <I>, U: <M>, I: <I>, M: <M>], \n    U: [N: <M>, U: <I>, I: <M>, M: <I>], \n    I: [N: <I>, U: <M>, I: <I>, M: <M>], \n    M: [N: <M>, U: <I>, I: <M>, M: <I>]\n  ], \n  I: [\n    N: [N: <I>, U: <U>, I: <M>, M: <M>], \n    U: [N: <U>, U: <U>, I: <M>, M: <M>], \n    I: [N: <M>, U: <M>, I: <I>, M: <U>], \n    M: [N: <M>, U: <M>, I: <U>, M: <U>]\n  ], \n  M: [\n    N: [N: <N>, U: <U>, I: <I>, M: <M>], \n    U: [N: <U>, U: <N>, I: <M>, M: <I>], \n    I: [N: <I>, U: <M>, I: <N>, M: <U>], \n    M: [N: <M>, U: <I>, I: <U>, M: <N>]\n  ]\n]";
                t.equal(Value$Formform.VMap.show(undefined, actual), expected, "should be " + expected);
                
              }));
        
      }));

export {
  listRel ,
  map_n ,
  
}
/*  Not a pure module */
